name: CI

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e blender_addon[dev]

      - name: Run markdown linter
        run: |
          python blender_addon/scripts/markdown_lint.py

      - name: Ruff Lint
        run: |
          set -e
          if ! ruff check .; then
            echo "::error::Ruff lint failed. If failures are only formatting/imports, run: pre-commit install && pre-commit run --all-files (or 'make lint-fix')." >&2
            exit 1
          fi

      - name: Run tests with coverage
        run: pytest --cov-report=term-missing --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          fail_ci_if_error: false
          verbose: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Build add-on zip
        run: python blender_addon/scripts/build_addon.py

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: addon-zip
          path: dist/*.zip

  release:
    # Only run on tag push like v0.1.0
    needs: build-test-lint
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: addon-zip
          path: dist

      - name: Get version from tag
        id: vars
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
            tag_name: ${{ steps.vars.outputs.version }}
            name: EVE Frontier Visualizer ${{ steps.vars.outputs.version }}
            draft: false
            prerelease: false
            files: |
              dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
