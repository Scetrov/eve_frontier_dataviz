name: CI

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e blender_addon[dev]

      - name: Run markdown linter
        run: |
          python blender_addon/scripts/markdown_lint.py

      - name: Check for unused imports and variables
        run: |
          echo "Checking for unused imports (F401) and variables (F841)..."
          ruff check --select F401,F841 blender_addon/src/

      - name: Ruff Lint
        run: |
          set -e
          if ! ruff check .; then
            echo "::error::Ruff lint failed. If failures are only formatting/imports, run: pre-commit install && pre-commit run --all-files (or 'make lint-fix')." >&2
            exit 1
          fi

      - name: Verify documentation exists for features
        run: |
          echo "Checking documentation coverage..."
          # Verify key documentation files exist
          test -f blender_addon/docs/FEATURES.md || { echo "::error::FEATURES.md missing"; exit 1; }
          test -f blender_addon/docs/ARCHITECTURE.md || { echo "::error::ARCHITECTURE.md missing"; exit 1; }
          test -f blender_addon/docs/SHADERS.md || { echo "::error::SHADERS.md missing"; exit 1; }
          test -f blender_addon/docs/DATA_MODEL.md || { echo "::error::DATA_MODEL.md missing"; exit 1; }
          echo "All required documentation files present ✓"

      - name: Check for TODOs and FIXMEs
        run: |
          echo "Scanning for TODO/FIXME comments..."
          if grep -r "TODO\|FIXME" blender_addon/src/ --include="*.py" | grep -v "# OK:" | grep -v "__pycache__"; then
            echo "::warning::Found TODO/FIXME comments in code. Review before release."
          else
            echo "No untracked TODO/FIXME comments found ✓"
          fi
        continue-on-error: true

      - name: Run tests with coverage
        working-directory: ./blender_addon
        run: pytest --cov-report=term-missing --cov-report=xml

      - name: Check coverage threshold
        working-directory: ./blender_addon
        run: |
          # Extract coverage percentage from pytest output
          coverage_pct=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])")
          coverage_int=$(python -c "print(int(float($coverage_pct) * 100))")
          echo "Coverage: ${coverage_int}%"
          if [ "$coverage_int" -lt 90 ]; then
            echo "::error::Coverage ${coverage_int}% is below 90% threshold"
            exit 1
          fi
          echo "Coverage check passed ✓"

      - name: Verify coverage file exists
        run: |
          if [ -f "blender_addon/coverage.xml" ]; then
            echo "Coverage file found ✓"
            ls -lh blender_addon/coverage.xml
          else
            echo "::error::Coverage file not found!"
            exit 1
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./blender_addon/coverage.xml
          flags: unittests
          name: codecov-umbrella
          # Make the upload non-fatal so we can debug failures without blocking CI
          fail_ci_if_error: false
          verbose: true

      - name: Build add-on zip
        run: python blender_addon/scripts/build_addon.py

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: addon-zip
          path: dist/*.zip
